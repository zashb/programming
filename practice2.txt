“””
Prob: word ladder
Idea: queue / bfs, stack=[[start,1]]
Comp:
“””

Def word_ladder(s, t, dict):
    If not s or not t or not dict:
        Return -1
    Def is_adj(a,b):
        If not (a and b):
            Return -1
        Count = 0
        For I in range(len(a)):
            If a[i] != b[i]:
                Count += 1
            If count > 1:
                Break
        Return True if count == 1 else False
    Stack = [[s,1]]
    While stack:
        Curr = stack.pop()
        For I in dict:
            Temp = I
            If is_adj(curr[0], temp):
                Stack.append([temp, stack[-1][1] + 1])
                dict.remove(temp)
                If temp == t:
                    Return stack[-1][1]
def bin_search(arr, t):
    if not arr or not t:
        return -1
    l,r = 0, len(arr) - 1:
    while l < r:
        mid = (l + r) // 2
        if arr[mid] == t:
            return mid
        elif if t > arr[mid]:
            l = mid + 1
        else:
            r = mid - 1
    return -1"""
idea: bin_src on res, no ret, res[r] = i
longest inc may or may not be longest continuous
"""
def longest_inc_subseq(arr):
    if not arr:
        return -1
    if len(arr) == 1:
        return arr[0]
    res = []
    for i in arr:
        if len(res) == 0 or i > res[-1]:
            res.append(i)
        else:
            l,r = 0, len(res)
            while l < r:
                mid = (l + r) // 2
                if i > res[mid]:
                    l = mid + 1
                else:
                    r = mid - 1
            res[r] = i"""
idea: lookup, streak
"""
def longest_contin_subarr(arr):
    if not arr:
        return 0
    lookup, res = set(arr), 0
    for i in arr:
        if i - 1 in lookup:
            continue
        streak = 1
        while i + streak in lookup:
            streak += 1
            res = max(res, streak)
    return res """
idea: count, res
"""
def majority_elem(arr):
    if not arr:
        return None
    if len(arr) == 1:
        return arr[0]
    for i in arr:
        if count == 0:
            res = i
            count += 1
        elif res == i:
            count += 1
        else:
            count -= 1
    return res"""
idea: map[a[i]]=b[i]
"""
def isomorphic(a,b):
    if not a or not b:
        return False
    if len(a) != len(b):
        return False
    map_a, map_b = dict(), dict()
    for i in range(len(a)):
        if a[i] in map_a:
            if map_a[a[i]] != b[i]:
                return False
        else:
            map_a[a[i]]=b[i]
     return True """
idea: 2 ptr, check if words[lp]+words[rp] and words[rp]+words[lp]
"""
def pal_pairs(arr):
    if not arr:
        return -1
    res = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            w1, w2 = arr[i]+arr[j], arr[j]+arr[i]
            if w1==w1[::-1] and i!=j:
                res.append([i,j])
            if w2==w2[::-1] and i!=j:
                res.append([j,i])
    return res"""
"""
def valid_anag(a,b):
    if not a or not b:
        return False
    if len(a)!= len(b):
        return False
    ord_flag = [0]*128
    for i in a:
        ord_flag[ord(i)-ord('a')]+=1
    for i in b:
        ord_flag[ord(i)-ord('a')]-=1
    for i in ord_flag:
        if i != 0:
            return False
    return True"""
idea: res[[]], track it
"""
def longest_substr_without_rep_char(arr):
    if not arr:
        return 0
    res, res_i = [[]], 0
    for i in arr:
        if i not in res[res_i]:
            res[res_i].append(i)
        else:
            res.append([i])
            res_i += 1
    return len(max(res, key=len))"""
idea: counter, iter=counter.keys(), key=counter.get
"""
def k_most_freq(arr,k):
    if not arr:
        return -1
    count = Counter(arr)
    return heapq.nlargest(k, count.keys(),key=count.get)"""
idea: sort by duration
"""
def meeting_rooms(arr):
    if not arr:
        return False
    arr.sort(key=lambda x:x[0]-x[1])
    for i in range(len(arr)):
        if arr[i][1] > arr[i+1][1]:
            return False
    return True"""
idea: heap
"""
def meeting_rooms(arr):
    if not arr:
       return -1
    arr.sort(key=lambda x:x[0])
    pq = []
    for i in arr:
        if pq and i[0] >= pq[0]:
            heapq.heappop(pq)
            heapq.heappush(pq, i[1])
        else:
            heapq.heappush(pq, i[1])
    return len(pq)




